* interactive

**  doc

http://ergoemacs.org/emacs/elisp_interactive_form.html

** 解释

The interactive expression must come right after the doc string.

interactive是一个特殊的函数，它必须放在函数body体的最上方，只能在Doc下面。

*** 成为可调用命令

To be able to run a function of your own from a keybinding, it needs to be interactive. You need to add (interactive) to your defun.

#+BEGIN_SRC elisp
;; 加入 interactive　说明它是可以被　M-x 看所调用的
;; 否则就是一般的函数，无法keybinding
(defun test123 ()
  "Some function."
  (interactive)
  (message "hello leo"))
#+END_SRC


*** 获取用户输入

A common way of getting user input is by the “interactive” form.

通过 interactive你就可以获取用户输入

**** Get String as Argument

~(interactive "sprompt_string")~ prompt user, pass as first argument of function as string.

#+BEGIN_SRC elisp
(defun ask-name (x)
  "Ask name."
  (interactive "sEnter your name: ")
  (message "Name: %s" x))
#+END_SRC

**** Get Number as Argument

~(interactive "nprompt_string")~ prompt user, pass answer as first argument of function as string.

#+BEGIN_SRC elisp
(defun ask-age (x)
  "Ask age."
  (interactive "nEnter your age: ")
  (message "Name: %d" x))
#+END_SRC

**** Get Region Begin End Positions as Argument

~(interactive "r")~ pass answer region begin and end as arguments to function.  获取regin的起始位置和结束位置

#+BEGIN_SRC elisp
(defun print-region-boundary (x y)
  "Prints region start and end positions"
  (interactive "r")
  (message "Region begin at: %d, end at: %d" x y))
#+END_SRC

**** Passing Interactive a List

~(interactive list_expression)~ pass the list that's the value of list_expression to function as arguments.

This is the most general way of using interactive. The list_expression can be any lisp code, it just need to return a list. The lisp
code can contain prompts, such as read-string, read-file-name, etc.

#+BEGIN_SRC elisp
(defun do-something (x y)
  "Ask name and age"
  (interactive
   ;; complex code here that returns a list
   (list "Mary" 22))
  (message "Name is: %s, Age is: %d" x y))
#+END_SRC

**** interactive输入获取总结

(interactive &optional ARG-DESCRIPTOR)

Code letters available are:

| code |  desc |
|---+-------------------------------------------------------------------------|
| a | Function name: symbol with a function definition.                       |
| b | Name of existing buffer.                                                |
| B | Name of buffer, possibly nonexistent.                                   |
| c | Character (no input method is used).                                    |
| C | Command name: symbol with interactive function definition.              |
| d | Value of point as number.  Does not do I/O.                             |
| D | Directory name.                                                         |
| e | Parameterized event (i.e., one that’s a list) that invoked this command. If used more than once, the Nth ‘e’ returns the Nth parameterized event. This skips events that are integers or symbols.  |
| f | Existing file name.                                                     |
| F | Possibly nonexistent file name.                                         |
| G | Possibly nonexistent file name, defaulting to just directory name.      |
| i | Ignored, i.e. always nil.  Does not do I/O.                             |
| k | Key sequence (downcase the last event if needed to get a definition).   |
| K | Key sequence to be redefined (do not downcase the last event).          |
| m | Value of mark as number.  Does not do I/O.                              |
| M | Any string.  Inherits the current input method.                         |
| n | Number read using minibuffer.                                           |
| N | Numeric prefix arg, or if none, do like code ‘n’.                       |
| p | Prefix arg converted to number.  Does not do I/O.                       |
| P | Prefix arg in raw form.  Does not do I/O.                               |
| r | Region: point and mark as 2 numeric args, smallest first.  Does no I/O. |
| s | Any string.  Does not inherit the current input method.                 |
| S | Any symbol.                                                             |
| U | Mouse up event discarded by a previous k or K argument.                 |
| v | Variable name: symbol that is ‘custom-variable-p’.                      |
| x | Lisp expression read but not evaluated.                                 |
| X | Lisp expression read and evaluated.                                     |
| z | Coding system.                                                          |
| Z | Coding system, nil if no prefix arg.                                    |

In addition, if the string begins with ‘*’, an error is signaled if
  the buffer is read-only.
If ‘@’ appears at the beginning of the string, and if the key sequence
 used to invoke the command includes any mouse events, then the window
 associated with the first of those events is selected before the
 command is run.
If the string begins with ‘^’ and ‘shift-select-mode’ is non-nil,
 Emacs first calls the function ‘handle-shift-selection’.
You may use ‘@’, ‘*’, and ‘^’ together.  They are processed in the
 order that they appear, before reading any arguments.

https://www.gnu.org/software/emacs/manual/html_node/elisp/Interactive-Call.html#Interactive-Call
