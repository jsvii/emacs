#+TITLE: DAP

* intro

https://microsoft.github.io/debug-adapter-protocol/

** intro

*** 基本角色

- 编辑器 Editor，IDE

- 调试适配器 Debug Adapter

- 调试器 debuger 包括被调试对象 debuggee

*** 流程

- 调试会话（debug session)

调试过程是通过会话（session）来完成的，会话指的是编辑器与调试适配器（Debug Adapter）之间的交互过程。它们之间通过DAP（Debug Adapter Protocol）通信。

总共有两种会话模式，single session mode 和 multi session mode。

前者调试适配器（Debug Adapter）进程是由编辑器启动的，通过标准输入输出进行交互，调试结束后，该进程会被终止。后者，编辑器会假定调试适配器（Debug Adapter）已经启动了，然后通过唯一端口号与调试适配器（Debug Adapter）建立连接。编辑器终止会话，只是与调试适配器（Debug Adapter）断开连接。

- 初始化

DAP（Debug Adapter Protocol）定义了很多调试特性，并且这个特性列表还在不断增加，为了避免使用版本号进行区分，为了兼容性考虑，
编辑器和调试适配器（Debug Adapter）之间，在初始化时，要互相通信，借此让编辑器了解，调试适配器（Debug Adapter）支持哪些调试特性，这些特性合集称为能力（capabilities）。

- 调试方式

调试配置器（Debug Adapter）有两种方式启动调试，launch 和 attach。

  1. attach方式，调试适配器（Debug Adapter）会通过调试器（debugger）与一个已经在运行的程序建立连接，用户可以启动和终止这个程序。

  1. launch方式，由调试适配器（Debug Adapter）启动被调试的程序，通过调试器（debugger）与之建立连接，被调试程序的启动和终止都是由调试适配器（Debug Adapter）负责的。

- 设置断点

断点以及异常相关的配置，是在程序启动之前由编辑器传递给调试适配器（Debug Adapter）的，因为不同的调试器（debugger）对于何时使用断点信息有不同的原则，一些调试器（debugger）要提前知道断点信息，有些则不用。

因此，编辑器会在启动调试之前，先把断点信息传递给调试适配器（Debug Adapter）。


- 调用栈信息与局部变量

调试适配器（Debug Adapter）会在断点处，向调试器（debugger）发送停止信号，程序停止后，编辑器会再通过调试适配器（Debug Adapter）请求获取调用栈信息（stacktrace）。

在调试过程中，通常用户还需要查看局部变量的值，编辑器会再次发送请求，通过调试适配器（Debug Adapter）获取所有的局部变量名以及它们的值。
