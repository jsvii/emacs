* Advice

A piece of advice attached to a Lisp function is code that gets executed before or after the function each time the function is invoked. Before advice can affect the arguments before they're passed to the advised function. After advice can affect the return value that comes out of the advised function. Advice is a little bit like hook variables, but whereas Emacs defines only a few dozen hook variables for very particular circumstances, you get to choose which functions get "advised."

#+BEGIN_SRC elisp
(defun foo () (interactive) (insert "hello"))
(defadvice foo (after foo-after activate) (insert " world!\n"))
(foo) ;=> hello world!
#+END_SRC

取消advise

#+BEGIN_SRC elisp
;; now you can unadvise the advised function
(ad-unadvise 'foo)
(foo)
#+END_SRC


Advised hello world

    (defun foo () (interactive) (insert "hello"))
    (defadvice foo (after foo-after activate) (insert " world!\n"))
    (foo) ;=> hello world!
   ;; now you can unadvise the advised function
   (ad-unadvise 'foo)
   (foo)

Simple Advising

To advise a function, you use `advice-add`. It takes the function you want to advise, quoted. An advice
combinator (around, before, after, etc). And it takes the function you wrote to be run.

A simple piece of before advice looks like this:

#+BEGIN_SRC elisp
(defun my-message (&optional ARG PRED)
  (message "hello!"))
(advice-add 'save-some-buffers :before 'my-message)
#+END_SRC

Something to note is the function signatures. Functions used with `:before` and `:after` will receive the
same arguments as the functions they advise.

Interactive functions

Maintaining interactive-p inside an advised function can be a pain. For details on this, read up the
comments etc. in advice.el. Here’s an example from Le Wang on how to maintain interactive-p inside the
function definition of an advised function.

#+BEGIN_SRC elisp
(defun bar ()
  (interactive)
  (message "bar interactive: %s" (interactive-p))
  (sit-for 1))
(defadvice bar (around advice-bar activate)
  (interactive)
  (if (interactive-p)
      (progn
        (message "advice-bar interactive: %s" (interactive-p))
        (sit-for 1)
        (call-interactively (ad-get-orig-definition 'bar)))
    ad-do-it))
#+END_SRC


** Advice Vs Hooks 什么时候使用advice？答案：尽可能永远不使用

When having the choice to use a Hook or Advice to manipulate a certain package, what should you do?

Hooks are always better because they break less. If the author provided a hook, then the author expects
user code to run. Advice, however, can have unexpected side effects. Advice should only be used when no
hook is provided.

The problem is that advice subtly changes the semantics of the commands it advises, and this change is not
visible in the code of those commands. So it works, but it’s better to fix those commands directly. That
doesn’t mean `advice.el’ is evil, but that it should only be used when you cannot change the command; for
example if you want your package to work with older releases.

Advised functions are difficult to use with the debugger.

Extra special care needs to be taken when advising Emacs Lisp primitives. The special case of advising
primitives is further explained in the EmacsLispReference.

What other people have said

Here is StefanMonnier’s strong ‘advice’ advice from mailing list help-gnu-emacs@gnu.org:

`advice' is a sledghammer: it's the last resort before
modifying the source code.

Advising is a source of major headaches because of unexpected
interactions with other pieces of code...
Advice have to be written *extremely* carefully.
I.e. if you can do it without `advice', then don't use `advice'.

And this is what RichardStallman said 2005-03-03 about Emacs developers (not users) advising Emacs
primitives:

Please do not think of making any part of Emacs advise primitives.
That technique should never be used, because it causes confusion.  All
code in Emacs that advises other parts of Emacs was installed without
my knowledge.  It is a bug that ought to be fixed.

And this is what RichardStallman said 2005-08-03:

No!  Emacs code should not use defadvice.

When you're trying to make improvements in Emacs or fix problems in
Emacs, please do NOT think of defadvice as the way to do it.

And this is from an exchange on help-gnu-emacs@gnu.org, 2007-06-02, between KevinRodgers and EliZaretski:

Kevin> I think RMS' position is that defadvice should not be
Kevin> used within Emacs itself.  But the inclusion of defadvice.el
Kevin> in Emacs is tacit acknowledgement of its usefulness

Eli> You are right on both accounts.  And I see no contradiction
Eli> between those two, because RMS never said that defadvice is
Eli> not useful.  His position on not using it within Emacs itself
Eli> is because doing that obscures how things work, which is bad
Eli> from the maintainability point of view.  FWIW, I agree with that.
