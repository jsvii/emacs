* defgroup

** 什么是group

*** stackoverflow 上关于“为什么需要有group”的回答

When and why do you use any grouping? To be able to act on the group as a whole or on its individual members - only its members. That's the answer here also.

There are commands and other functions that act on a given group or set of groups. ~customize-group~ is one that acts on a given group. ~customize-apropos-groups~ is one that acts on a set of groups.

一些命令和函数是作用于一个group上的， ~customize-group~ 是在这个group上的操作

When you use ~customize-group~ you see links that let you customize subgroups (if any) and individual members (options and faces) of that group.

In addition, a group typically has a prefix, and you can use that for pattern-matching against function, face, etc. names when you interact with Emacs. This is another way of limiting actions to a given set (customization group) of things.

A group can also provide quick access to the online doc, source code, bug reporting, etc. for a package. Here, for instance, is the definition of group ~Icicles-Key-Completion~ (with some code elided).

#+BEGIN_SRC emacs-lisp
(defgroup Icicles-Key-Completion nil
  "Icicles preferences related to key completion (`icicle-complete-keys')."
  :prefix "icicle-" :group 'Icicles
  :link `(url-link :tag "Send Bug Report" ...)
  :link '(url-link :tag "Other Libraries by Drew" ...)
  :link '(url-link :tag "Download" ...)
  :link '(url-link :tag "Description" ...)
  :link '(emacs-commentary-link :tag "Doc-Part2" "icicles-doc2")
  :link '(emacs-commentary-link :tag "Doc-Part1" "icicles-doc1"))
#+END_SRC

This group is itself a subgroup of group Icicles (see ~:group~). It provides links in the Customize buffer for sending a bug report, downloading, and accessing the doc in the source code or on the Web.


#+BEGIN_SRC emacs-lisp
(defgroup magit-status nil
  "Inspect and manipulate Git repositories."
  :link '(info-link "(magit)Status Buffer")
  :group 'magit-modes)
#+END_SRC

*** 定义

defgroup是个宏，参数分别为

1. group名

1. members

1. 文档 :link

1. 其他参数

~group~ 是全局和buffer之外的另一种作用域，也就是，group中定义的变量若与前两者重名则以group优先，但低于let中的优先级。

~customize-group~ 时，也只对当前的session有效。

:group是其重要的关键字，以便指定其所属的父group，最上层应该是xxx-mode。

:link 提供了文档的链接


#+BEGIN_SRC elisp
(defmacro defgroup (symbol members doc &rest args)
  "Declare SYMBOL as a customization group containing MEMBERS.
SYMBOL does not need to be quoted.

Third argument DOC is the group documentation.  This should be a short
description of the group, beginning with a capital and ending with
a period.  Words other than the first should not be capitalized, if they
are not usually written so.

MEMBERS should be an alist of the form ((NAME WIDGET)...) where
NAME is a symbol and WIDGET is a widget for editing that symbol.
Useful widgets are `custom-variable' for editing variables,
`custom-face' for editing faces, and `custom-group' for editing groups.

The remaining arguments should have the form

   [KEYWORD VALUE]...

For a list of valid keywords, see the common keywords listed in
`defcustom'.

See Info node `(elisp) Customization' in the Emacs Lisp manual
for more information."
  (declare (doc-string 3))
  ;; It is better not to use backquote in this file,
  ;; because that makes a bootstrapping problem
  ;; if you need to recompile all the Lisp files using interpreted code.
  (nconc (list 'custom-declare-group (list 'quote symbol) members doc) args))



(defun custom-declare-group (symbol members doc &rest args)
  "Like `defgroup', but SYMBOL is evaluated as a normal argument."
  (while members
    (apply 'custom-add-to-group symbol (car members))
    (setq members (cdr members)))
  (when doc
    ;; This text doesn't get into DOC.
    (put symbol 'group-documentation (purecopy doc)))
  (while args
    (let ((arg (car args)))
      (setq args (cdr args))
      (unless (symbolp arg)
        (error "Junk in args %S" args))
      (let ((keyword arg)
            (value (car args)))
        (unless args
          (error "Keyword %s is missing an argument" keyword))
        (setq args (cdr args))
        (cond ((eq keyword :prefix)
               (put symbol 'custom-prefix (purecopy value)))
              (t
               (custom-handle-keyword symbol keyword value
                                      'custom-group))))))
  ;; Record the group on the `current' list.
  (let ((elt (assoc load-file-name custom-current-group-alist)))
    (if elt (setcdr elt symbol)
      (push (cons load-file-name symbol) custom-current-group-alist)))
  (run-hooks 'custom-define-hook)
  symbol)
#+END_SRC







#+BEGIN_SRC elisp
(macroexpand-1 '(defgroup demo-ui nil
                  "Interaction with the Superior Lisp Environment."
                  :prefix "demoui-"
                  :group 'applications))


(custom-declare-group (quote demo-ui) nil "Interaction with the Superior Lisp Environment." :prefix "demoui-" :group (quote applications))
#+END_SRC
